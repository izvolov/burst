language: cpp

.bionic-job-template: &bionic-job
  os: linux
  dist: bionic
  install:
  - wget -O - https://apt.kitware.com/keys/kitware-archive-latest.asc 2>/dev/null | sudo apt-key add -
  - sudo apt-add-repository 'deb https://apt.kitware.com/ubuntu/ bionic main'

  - sudo apt update
  - sudo apt install --yes $COMPILER_PACKAGE libboost-program-options$BOOST_VERSION-dev git cmake

  - git clone https://github.com/onqtam/doctest.git third_party/doctest
  - git -C third_party/doctest checkout 2.3.3
  - /usr/bin/cmake -S third_party/doctest -B Build/third_party/doctest -DCMAKE_BUILD_TYPE=Release -DCMAKE_CXX_COMPILER=$COMPILER_NAME
  - sudo /usr/bin/cmake --build Build/third_party/doctest --target install/fast
  script:
  - /usr/bin/cmake -S . -B Build/burst -DCMAKE_BUILD_TYPE=$BUILD_TYPE -DCMAKE_CXX_COMPILER=$COMPILER_NAME
  - /usr/bin/cmake --build Build/burst --target check

.macos-job-template: &macos-job
  os: osx
  compiler: clang
  addons:
    homebrew:
      packages:
      - cmake
      - boost
  install:
  - git clone https://github.com/onqtam/doctest.git third_party/doctest
  - git -C third_party/doctest checkout 2.3.3
  - cmake -Hthird_party/doctest -BBuild/third_party/doctest -DCMAKE_BUILD_TYPE=Release
  - sudo cmake --build Build/third_party/doctest --target install/fast
  script:
  - cmake -H. -BBuild/burst -DCMAKE_BUILD_TYPE=$BUILD_TYPE
  - cmake --build Build/burst --target check

.coverage-job-template: &coverage-job
  os: linux
  dist: bionic
  install:
  - wget -O - https://apt.kitware.com/keys/kitware-archive-latest.asc 2>/dev/null | sudo apt-key add -
  - sudo apt-add-repository 'deb https://apt.kitware.com/ubuntu/ bionic main'

  - sudo apt update
  - sudo apt install --yes gcovr libboost-program-options-dev cmake git lcov
  - pip install --user cpp-coveralls

  - git clone https://github.com/onqtam/doctest.git third_party/doctest
  - git -C third_party/doctest checkout 2.3.3
  - /usr/bin/cmake -S third_party/doctest -B Build/third_party/doctest -DCMAKE_BUILD_TYPE=Release -DCMAKE_CXX_COMPILER=$COMPILER_NAME
  - sudo /usr/bin/cmake --build Build/third_party/doctest --target install/fast
  script:
  - /usr/bin/cmake -S . -B Build/burst -DCMAKE_BUILD_TYPE=Debug -DBURST_COVERAGE=ON
  - /usr/bin/cmake --build Build/burst --target coverage
  after_success:
  - lcov --capture --directory Build/burst --output-file coverage.info
  - lcov --remove coverage.info "/usr/*" --output-file coverage.info
  - lcov --remove coverage.info "*/test/*" --output-file coverage.info
  - bash <(curl -s https://codecov.io/bash) -f coverage.info || echo "Codecov did not collect coverage reports"

matrix:
  include:
  - <<: *bionic-job
    env: COMPILER_PACKAGE=clang-7 COMPILER_NAME=clang++-7 BOOST_VERSION=1.65 BUILD_TYPE=Debug
  - <<: *bionic-job
    env: COMPILER_PACKAGE=clang-7 COMPILER_NAME=clang++-7 BOOST_VERSION=1.65 BUILD_TYPE=Release
  - <<: *bionic-job
    env: COMPILER_PACKAGE=g++-7 COMPILER_NAME=g++-7 BOOST_VERSION=1.65 BUILD_TYPE=Debug
  - <<: *bionic-job
    env: COMPILER_PACKAGE=g++-7 COMPILER_NAME=g++-7 BOOST_VERSION=1.65 BUILD_TYPE=Release
  - <<: *bionic-job
    env: COMPILER_PACKAGE=g++-8 COMPILER_NAME=g++-8 BOOST_VERSION=1.65 BUILD_TYPE=Debug
  - <<: *bionic-job
    env: COMPILER_PACKAGE=g++-8 COMPILER_NAME=g++-8 BOOST_VERSION=1.65 BUILD_TYPE=Release
  - <<: *macos-job
    osx_image: xcode11.4
    env: BUILD_TYPE=Debug
  - <<: *macos-job
    osx_image: xcode11.4
    env: BUILD_TYPE=Release
  - <<: *coverage-job
