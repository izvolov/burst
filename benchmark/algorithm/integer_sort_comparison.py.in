#!/usr/bin/python
# -*- coding: utf-8 -*-

from subprocess import Popen, PIPE
import argparse
import numpy as np
import matplotlib.pyplot as plt
import sys

def measure (lengths, max_attempts, integer_type, prepare):
    measurements = {}

    command_template =\
        ("@CMAKE_BINARY_DIR@/benchmark/rangegen "
            "--count=1 "
            "--length={} | "
        "@CMAKE_BINARY_DIR@/benchmark/algorithm/radix "
            "--attempts={} "
            "--integer={} "
            "--prepare={}")

    for length, attempts in [(l, max_attempts / l) for l in lengths]:
        command = command_template.format(length, attempts, integer_type, prepare)
        sys.stderr.write(command + '\n');
        results = Popen(command, shell=True, stdin=PIPE, stdout=PIPE).stdout.read().splitlines()

        for algorithm, time in [(a, float(t) / attempts) for a, t in [item.split() for item in results]]:
            times = measurements.setdefault(algorithm, [])
            times += [time]

    return measurements

def plot (lengths, measurements, integer_type, file_name):
    plt.rc('font',**{'family':'verdana'})
    plt.figure(num=1)
    plt.title(u'Производительность целочисленных сортировок (' + integer_type + ')', size=14)
    plt.xlabel(u'Количество элементов в массиве, шт', size=14)
    plt.ylabel(u'Среднее время сортировки, с', size=14)

    x = np.array(lengths)

    for algorithm, times in measurements.items():
        y = np.array(times)
        plt.plot(x, y, label=algorithm)

    plt.legend(loc='upper left')
    plt.savefig(file_name, format='png')

def table (lengths, measurements, integer_type, file_name):
    f = open(file_name, 'w')

    header_template = u''.join(['| {:<20} '] * (1 + len(measurements.items()))) + u'|\n'
    row_template = u'| {:<20} ' + u''.join(['| {:<20.2e} '] * (len(measurements.items()))) + u'|\n'

    table_string = header_template.format(u'Размер массива', *[a for a, _ in measurements.items()])
    table_string += u''.join(['| ' + '-' * 20 + ' '] * (1 + len(measurements.items()))) + u'|\n'
    for i in range(0, len(lengths)):
        table_string += row_template.format(lengths[i], *[times[i] for _, times in measurements.items()])

    f.write(table_string.encode('utf-8'))

def parse_command_line (options):
    parser = argparse.ArgumentParser(options[0])
    parser.add_argument('--begin', type=int, default=10,
        help='Минимальный размер массива')
    parser.add_argument('--end', type=int, default=100,
        help='Максимальный размер массива')
    parser.add_argument('--step', type=int, default=10,
        help='Шаг размера массива')
    parser.add_argument('--prefix', type=str, default='intsort',
        help='Префикс выходного файла')
    parser.add_argument('--integer', type=str, default='uint32',
        help='Тип сортируемых чисел',
        choices=['int8', 'int16', 'int32', 'int64', 'uint8', 'uint16', 'uint32', 'uint64'])
    parser.add_argument('--prepare', type=str, default='shuffle',
        help='Предобработка массива перед каждой сортировкой',
        choices=['shuffle', 'ascending', 'descending', 'outlier'])
    parser.add_argument('--attempts', type=int, default=10000000,
        help='Максимальное количество итераций')
    args = parser.parse_args(options[1:])
    return args.begin, args.end, args.step, args.prefix, args.integer, args.prepare, args.attempts

begin, end, step, prefix, integer_type, prepare, attempts = parse_command_line(sys.argv)
lengths = range(begin, end, step)

measurements = measure(lengths, attempts, integer_type, prepare)

file_name = '_'.join((prefix, str(begin), str(end), str(step), integer_type, prepare, str(attempts)))
plot(lengths, measurements, integer_type, file_name + '.png')
table(lengths, measurements, integer_type, file_name + '.txt')
