#!/usr/bin/env python3
# -*- coding: utf-8 -*-

from subprocess import Popen, PIPE
import argparse
import numpy as np
import matplotlib.pyplot as plt
import sys

def measure (algorithms, lengths, max_attempts, value_type, prepare):
    measurements = {}

    command_template =\
        ("@CMAKE_BINARY_DIR@/benchmark/tools/rangegen "
            "--count=1 "
            "--length={} | "
        "@CMAKE_BINARY_DIR@/benchmark/burst/algorithm/radix "
            "--algo={} "
            "--attempts={} "
            "--type={} "
            "--prepare={}")

    for length, attempts in [(l, int(max_attempts / l)) for l in lengths]:
        command = command_template.format(length, algorithms, attempts, value_type, prepare)
        sys.stderr.write(command + '\n');
        results = Popen(command, shell=True, stdin=PIPE, stdout=PIPE).stdout.read().splitlines()

        for algorithm, time in [(a.decode('utf8'), float(t)) for a, t in [item.split() for item in results]]:
            times = measurements.setdefault(algorithm, [])
            times += [time]

    return measurements

def normalize_measurements (measurements, lengths):
    normalized_measurements = {}

    for algo, times in measurements.items():
        normalized_measurements[algo] = [t / l for t, l in zip(times, lengths)]

    return normalized_measurements

def plot (scale, lengths, measurements, value_type, y_label, file_name):
    plt.rc('font',**{'family':'verdana'})
    plt.figure(num=1)
    plt.title(u'Сортировка чисел (' + value_type + ')', size=14)
    plt.xlabel(u'Количество элементов в массиве, шт', size=10)
    plt.ylabel(y_label, size=10)
    plt.grid(True)
    plt.xscale(scale)
    plt.yscale(scale)

    x = np.array(lengths)

    for algorithm, times in measurements.items():
        y = np.array(times)
        plt.plot(x, y, label=algorithm)

    if scale != 'log':
        plt.xlim(left=0)
        plt.ylim(bottom=0)
    plt.legend(loc='upper left')
    plt.tight_layout()
    plt.savefig(file_name, format='png')

def table (lengths, measurements, value_type, file_name):
    f = open(file_name, 'w')

    header_template = u''.join(['| {:<20} '] * (1 + len(measurements.items()))) + u'|\n'
    row_template = u'| {:<20} ' + u''.join(['| {:<20.2e} '] * (len(measurements.items()))) + u'|\n'

    table_string = header_template.format(u'Размер массива', *[a for a, _ in measurements.items()])
    table_string += u''.join(['| ' + '-' * 20 + ' '] * (1 + len(measurements.items()))) + u'|\n'
    for i in range(0, len(lengths)):
        table_string += row_template.format(lengths[i], *[times[i] for _, times in measurements.items()])

    f.write(table_string)

presets = {
    'all': ['radix', 'par', 'par2', 'par4', 'par8', 'par16', 'std', 'stable', 'boost'],
    'basic': ['radix', 'par', 'std', 'stable', 'boost'],
    'integral': ['radix', 'par', 'par2', 'par4', 'par8', 'par16', 'boost'],
    'integral_basic': ['radix', 'par', 'boost'],
    'burst': ['radix', 'par', 'par2', 'par4', 'par8', 'par16'],
    'burst_basic': ['radix', 'par'],
    'sequential': ['radix', 'std', 'stable', 'boost'],
    'parallel': ['par', 'par2', 'par4', 'par8', 'par16'],
}

def make_scale (linear, log):
    if (linear):
        begin, end, count = tuple(linear)
        lengths = [int(i) for i in np.linspace(begin, end, count)]
        return 'linear({},{},{})'.format(begin, end, count), lengths, 'linear'
    elif (log):
        begin, end, count = tuple(log)
        lengths = [int(i) for i in np.logspace(begin, end, count)]
        return 'log({},{},{})'.format(begin, end, count), lengths, 'log'

def make_algorithms (preset, algorithms):
    if algorithms:
        return ' '.join(algorithms)
    elif preset:
        return ' '.join(presets[preset])

def make_y_title (norm):
    if norm:
        return u'Среднее время сортировки элемента, с'
    else:
        return u'Среднее время сортировки массива, с'

def parse_command_line (options):
    parser = argparse.ArgumentParser(options[0])
    parser.add_argument('--prefix', type=str, default='intsort',
        help='Префикс выходного файла')
    parser.add_argument('--type', type=str, default='uint32',
        help='Тип сортируемых чисел',
        choices=['int8', 'int16', 'int32', 'int64', 'uint8', 'uint16', 'uint32', 'uint64', 'float', 'double'])
    parser.add_argument('--prepare', type=str, default='shuffle',
        help='Предобработка массива перед каждой сортировкой',
        choices=['shuffle', 'ascending', 'descending', 'outlier', 'pipe-organ', 'single'])
    parser.add_argument('--attempts', type=int, default=10000000,
        help='Максимальное количество итераций')
    parser.add_argument('--norm', action='store_true', default=False,
        help='Построить график со временем, нормированным на размер сортируемого массива')
    algorithms = parser.add_mutually_exclusive_group(required=True)
    algorithms.add_argument('--preset', type=str, default='basic',
        help='Набор алгоритмов, которые нужно замерить', choices=presets.keys())
    algorithms.add_argument('--algo', type=str, nargs='+',
        help='Алгоритмы, которые нужно замерить',
        choices=presets['all'])
    schema = parser.add_mutually_exclusive_group(required=True)
    schema.add_argument('--linear', type=int, nargs=3, metavar=('begin', 'end', 'count'),
        help='Линейная шкала размеров тестируемого массива')
    schema.add_argument('--log', type=int, nargs=3, metavar=('begin', 'end', 'count'),
        help='Логарифмическая шкала размеров тестируемого массива')
    args = parser.parse_args(options[1:])
    return args.linear, args.log, args.prefix, args.type, args.prepare, args.attempts, args.norm, args.preset, args.algo

linear, log, prefix, value_type, prepare, attempts, norm, preset, algo = parse_command_line(sys.argv)
scale_description, lengths, plot_scale = make_scale(linear, log)
attempts = max(attempts, lengths[-1])

algorithms = make_algorithms(preset, algo)
measurements = measure(algorithms, lengths, attempts, value_type, prepare)

if (norm):
    measurements = normalize_measurements(measurements, lengths)

algo_description = '({})'.format(algorithms.replace(' ', ','))
file_name = '_'.join((prefix, scale_description, value_type, prepare, algo_description, str(attempts), str(norm)))
plot(plot_scale, lengths, measurements, value_type, make_y_title(norm), file_name + '.png')
table(lengths, measurements, value_type, file_name + '.txt')
