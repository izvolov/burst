#!/usr/bin/python
# -*- coding: utf-8 -*-

from subprocess import Popen, PIPE
import argparse
import numpy as np
import matplotlib
matplotlib.use('agg')
import matplotlib.pyplot as plt
import sys
from itertools import cycle

def measure (array_size, spreads, attempts):
    spreading_names = {'sparse': u'Разреженный массив', 'shuffled': u'Перемешанный массив'}
    measurements = {}

    command_template =\
        ("@CMAKE_BINARY_DIR@/benchmark/burst/container/dyntuple "
            "--size={} "
            "--attempts={} "
            "--type=sparse shuffled "
            "--spread={} "
            "2>/dev/null")

    for spread, attempts in [(l, attempts) for l in spreads]:
        command = command_template.format(array_size, attempts, spread)
        results = Popen(command, shell=True, stdin=PIPE, stdout=PIPE).stdout.read().splitlines()

        for container, time in [(c, float(t) / attempts) for c, t in [item.split() for item in results]]:
            name = spreading_names.get(container, container)
            times = measurements.setdefault(name, [])
            times += [time]

    return measurements

def plot (array_size, spreads, measurements, file_name):
    plt.rc('font',**{'family':'verdana'})
    plt.figure(num=1)
    plt.title(u'Доступ к элементам контейнеров размера ' + str(array_size), size=14)
    plt.xlabel(u'Показатель разброса, ед', size=10)
    plt.ylabel(u'Среднее время доступа, с', size=10)
    plt.grid(True)

    x = np.array(spreads)
    plt.xticks(x)

    markers = ["x", "o", "+", "*"]
    markercycle = cycle(markers)

    for container, times in measurements.items():
        y = np.array(times)
        plt.plot(x, y, label=container, marker=next(markercycle))

    plt.ylim(bottom=0)
    plt.legend(loc='lower left')
    plt.tight_layout()
    plt.savefig(file_name, format='png')

def parse_command_line (options):
    parser = argparse.ArgumentParser(options[0])
    parser.add_argument('--size', type=int, default='100')
    parser.add_argument('--attempts', type=int, default='1000')
    parser.add_argument('--begin', type=int, default=1)
    parser.add_argument('--end', type=int, default=20)
    parser.add_argument('--step', type=int, default=2)
    parser.add_argument('--prefix', type=str, default='dyntuple')
    args = parser.parse_args(options[1:])
    return args.size, args.attempts, args.begin, args.end, args.step, args.prefix

def create_suffix (array_size, begin, end, step):
    return str(array_size) + '_' + str(begin) + '_' + str(end) + '_' + str(step)

size, attempts, begin, end, step, prefix = parse_command_line(sys.argv)
file_name = prefix + create_suffix(size, begin, end, step)

spreads = range(begin, end, step)

measurements = measure(size, spreads, attempts)
plot(size, spreads, measurements, file_name + '.png')
